{"ast":null,"code":"import * as L from 'leaflet';\nimport 'leaflet-routing-machine';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let MapApiComponent = /*#__PURE__*/(() => {\n  class MapApiComponent {\n    constructor(renderer, http) {\n      this.renderer = renderer;\n      this.http = http;\n      this.ListCoor = [];\n      this.center = [21.910941, -102.316465];\n      this.loadCoor();\n    }\n    ngOnInit() {}\n    ngOnDestroy() {\n      this.mapRef.off('click');\n    }\n    cargaTabla() {\n      const mapDiv = document.getElementById('map');\n      const map = L.map(mapDiv).setView(this.center, 16);\n      this.mapRef = map;\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\n        maxZoom: 19\n      }).addTo(map);\n      this.renderer.addClass(mapDiv, 'visible');\n      const resizeObserver = new ResizeObserver(() => {\n        map.invalidateSize();\n      });\n      resizeObserver.observe(mapDiv);\n      const interval = setInterval(() => {\n        //Array con coordenadas    \n        var latlngs = [];\n        //Código para el Leaflet Routing Machine para mostrar la línea de ruta\n        const planOptions = {\n          addWaypoints: false,\n          draggableWaypoints: false\n        };\n        const plan = new L.Routing.Plan(latlngs, planOptions);\n        const control = L.Routing.control({\n          plan,\n          addWaypoints: false,\n          routeWhileDragging: false\n        }).addTo(map);\n        //divide el array\n        for (var i = 0; i < this.ListCoor.length; i++) {\n          console.log(\"Entra for\");\n          var objCoorde = this.ListCoor[i];\n          var lati = parseFloat(objCoorde.latitud);\n          var longi = parseFloat(objCoorde.longitud);\n          var num = parseFloat(objCoorde.id);\n          if (num == 1) {\n            L.marker([longi, lati]).addTo(map).bindPopup(\"Punto \" + num).openPopup();\n          }\n          latlngs.push([longi, lati]);\n        }\n        control.setWaypoints(latlngs); //Establece los puntos en el mapa\n        control.hide();\n      }, 5000); // Intervalo de 5000 ms = 5 segundos\n    }\n\n    loadCoor() {\n      const interval = setInterval(() => {\n        this.ListCoor = [];\n        this.http.get('https://api.thingspeak.com/channels/2193277/feeds.json?api_key=ZFT84U02EQH0DUTH').subscribe(res => {\n          console.log(res);\n          //variable para guardar la conversion de datos json a string\n          const listString = res.feeds;\n          //concatena los datos que se reciben uno a uno en listString en el arreglo ListCoor\n          var i = 0;\n          listString.forEach(element => {\n            var coord = {\n              id: element.entry_id.toString(),\n              latitud: element.field3,\n              longitud: element.field1,\n              hora: element.field4\n            };\n            i++;\n            this.ListCoor.push(coord);\n          });\n        }, e => {\n          console.log('ERROR: ' + e);\n        });\n      }, 5000); // Intervalo de 5000 ms = 5 segundos\n    }\n  }\n\n  MapApiComponent.ɵfac = function MapApiComponent_Factory(t) {\n    return new (t || MapApiComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.HttpClient));\n  };\n  MapApiComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MapApiComponent,\n    selectors: [[\"app-map-api\"]],\n    inputs: {\n      center: \"center\"\n    },\n    decls: 3,\n    vars: 0,\n    consts: [[1, \"contenedor\"], [\"id\", \"map\", 1, \"map\", 3, \"click\"], [\"map\", \"\"]],\n    template: function MapApiComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1, 2);\n        i0.ɵɵlistener(\"click\", function MapApiComponent_Template_div_click_1_listener() {\n          return ctx.cargaTabla();\n        });\n        i0.ɵɵelementEnd()();\n      }\n    },\n    styles: [\"@import\\\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.css\\\";@import\\\"https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.css\\\";.contenedor[_ngcontent-%COMP%]{margin-top:20px;width:65vw}.map[_ngcontent-%COMP%]{height:95vh;box-shadow:5px 5px 5px #888;border:5px goldenrod;background-color:#fff8dc;border-style:dashed}.map.visible[_ngcontent-%COMP%]{opacity:1}.btn[_ngcontent-%COMP%]{margin:15px}\"]\n  });\n  return MapApiComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}