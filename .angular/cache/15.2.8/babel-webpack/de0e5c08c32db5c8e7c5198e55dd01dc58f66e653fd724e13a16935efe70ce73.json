{"ast":null,"code":"import * as L from 'leaflet';\nimport 'leaflet-routing-machine';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api/database.service\";\nexport class MapApiComponent {\n  constructor(renderer, dbService) {\n    this.renderer = renderer;\n    this.dbService = dbService;\n    this.ListCoor = [];\n    this.center = [21.910941, -102.316465];\n    this.loadCoor();\n  }\n  ngOnInit() {\n    this.cargaTabla();\n  }\n  ngOnDestroy() {\n    this.mapRef.off('click');\n  }\n  cargaTabla() {\n    const mapDiv = document.getElementById('map');\n    const map = L.map(mapDiv).setView(this.center, 16);\n    this.mapRef = map;\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\n      maxZoom: 19\n    }).addTo(map);\n    this.renderer.addClass(mapDiv, 'visible');\n    const resizeObserver = new ResizeObserver(() => {\n      map.invalidateSize();\n    });\n    resizeObserver.observe(mapDiv);\n    //Array con coordenadas    \n    var latlngs = [];\n    //Código para el Leaflet Routing Machine para mostrar la línea de ruta\n    const planOptions = {\n      addWaypoints: false,\n      draggableWaypoints: false\n    };\n    const plan = new L.Routing.Plan(latlngs, planOptions);\n    const control = L.Routing.control({\n      plan,\n      addWaypoints: false,\n      routeWhileDragging: false\n    }).addTo(map);\n    //divide el array\n    for (var i = 0; i < this.ListCoor.length; i++) {\n      console.log(\"Entra for\");\n      var objCoorde = this.ListCoor[i];\n      var lati = parseFloat(objCoorde.latitud);\n      var longi = parseFloat(objCoorde.longitud);\n      var num = parseFloat(objCoorde.id);\n      if (num == 1) {\n        L.marker([longi, lati]).addTo(map).bindPopup(\"Punto \" + num).openPopup();\n      }\n      latlngs.push([longi, lati]);\n    }\n    control.setWaypoints(latlngs); //Establece los puntos en el mapa\n    control.hide();\n  }\n  loadCoor() {\n    this.dbService.getCoor().subscribe(res => {\n      console.log(\"ENTRA A SERVICIO\");\n      //variable para guardar la conversion de datos json a string\n      const listString = JSON.stringify(res);\n      //concatena los datos que se reciben uno a uno en listString en el arreglo ListCoor\n      this.ListCoor = JSON.parse(listString);\n      //DEBUG\n      console.log('Coordenadas nuevas = ' + this.ListCoor);\n    }, e => {\n      console.log('ERROR: ' + e);\n    });\n  }\n}\nMapApiComponent.ɵfac = function MapApiComponent_Factory(t) {\n  return new (t || MapApiComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.DatabaseService));\n};\nMapApiComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MapApiComponent,\n  selectors: [[\"app-map-api\"]],\n  inputs: {\n    center: \"center\"\n  },\n  decls: 3,\n  vars: 0,\n  consts: [[1, \"contenedor\"], [\"id\", \"map\", 1, \"map\"], [\"map\", \"\"]],\n  template: function MapApiComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"div\", 1, 2);\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"@import url(https://unpkg.com/leaflet@1.9.3/dist/leaflet.css);@import url(https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.css);.contenedor[_ngcontent-%COMP%] {\\r\\n    width: 60vw;\\r\\n}\\r\\n\\r\\n.map[_ngcontent-%COMP%] {\\r\\n    height: 80vh;\\r\\n    box-shadow: 5px 5px 5px #888;\\r\\n}\\r\\n\\r\\n.map.visible[_ngcontent-%COMP%] {\\r\\n    opacity: 1;\\r\\n}\\r\\n\\r\\n.btn[_ngcontent-%COMP%] {\\r\\n    margin: 15px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbWFwLWFwaS9tYXAtYXBpLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0E7SUFDSSxXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxZQUFZO0lBQ1osNEJBQTRCO0FBQ2hDOztBQUVBO0lBQ0ksVUFBVTtBQUNkOztBQUVBO0lBQ0ksWUFBWTtBQUNoQiIsInNvdXJjZXNDb250ZW50IjpbIkBpbXBvcnQgdXJsKFwiaHR0cHM6Ly91bnBrZy5jb20vbGVhZmxldEAxLjkuMy9kaXN0L2xlYWZsZXQuY3NzXCIpO1xyXG5AaW1wb3J0IHVybChcImh0dHBzOi8vdW5wa2cuY29tL2xlYWZsZXQtcm91dGluZy1tYWNoaW5lQGxhdGVzdC9kaXN0L2xlYWZsZXQtcm91dGluZy1tYWNoaW5lLmNzc1wiKTtcclxuXHJcbi5jb250ZW5lZG9yIHtcclxuICAgIHdpZHRoOiA2MHZ3O1xyXG59XHJcblxyXG4ubWFwIHtcclxuICAgIGhlaWdodDogODB2aDtcclxuICAgIGJveC1zaGFkb3c6IDVweCA1cHggNXB4ICM4ODg7XHJcbn1cclxuXHJcbi5tYXAudmlzaWJsZSB7XHJcbiAgICBvcGFjaXR5OiAxO1xyXG59XHJcblxyXG4uYnRuIHtcclxuICAgIG1hcmdpbjogMTVweDtcclxufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["L","MapApiComponent","constructor","renderer","dbService","loadCoor","ngOnInit","cargaTabla","ngOnDestroy","mapRef","off","mapDiv","document","getElementById","map","setView","center","tileLayer","attribution","maxZoom","addTo","addClass","resizeObserver","ResizeObserver","invalidateSize","observe","latlngs","planOptions","addWaypoints","draggableWaypoints","plan","Routing","Plan","control","routeWhileDragging","i","ListCoor","length","console","log","objCoorde","lati","parseFloat","latitud","longi","longitud","num","id","marker","bindPopup","openPopup","push","setWaypoints","hide","getCoor","subscribe","res","listString","JSON","stringify","parse","e","selectors","inputs","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\Sebastian\\Desktop\\New folder\\servidorMapa\\src\\app\\map-api\\map-api.component.ts","C:\\Users\\Sebastian\\Desktop\\New folder\\servidorMapa\\src\\app\\map-api\\map-api.component.html"],"sourcesContent":["import {  Component, OnDestroy, Renderer2, Input } from '@angular/core';\r\nimport * as L from 'leaflet';\r\nimport 'leaflet-routing-machine';\r\nimport { DatabaseService } from '../api/database.service';\r\nimport { Coordenadas } from '../interfaces/coordenadas';\r\n\r\n@Component({\r\n  selector: 'app-map-api',\r\n  templateUrl: './map-api.component.html',\r\n  styleUrls: ['./map-api.component.css']\r\n})\r\nexport class MapApiComponent implements OnDestroy {\r\n  ListCoor: Coordenadas[] = [];\r\n  @Input() center : L.LatLngExpression = [21.910941, -102.316465];\r\n  mapRef: any;\r\n  \r\n  constructor(private renderer: Renderer2, public dbService: DatabaseService) {\r\n    this.loadCoor();\r\n  }\r\n  ngOnInit(){\r\n    this.cargaTabla();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.mapRef.off('click');\r\n  }\r\n\r\n  cargaTabla(){\r\n    const mapDiv = document.getElementById('map') as HTMLElement;\r\n    const map = L.map(mapDiv).setView(this.center, 16); \r\n    this.mapRef = map;\r\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n      attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\r\n      maxZoom: 19\r\n    }).addTo(map);\r\n    \r\n    this.renderer.addClass(mapDiv, 'visible');\r\n\r\n    const resizeObserver = new ResizeObserver(() => {\r\n      map.invalidateSize();\r\n    });\r\n    resizeObserver.observe(mapDiv);\r\n\r\n    //Array con coordenadas    \r\n    var latlngs :any = []; \r\n    \r\n    //Código para el Leaflet Routing Machine para mostrar la línea de ruta\r\n    const planOptions = {       \r\n      addWaypoints: false,       \r\n      draggableWaypoints: false     \r\n    }; \r\n\r\n    const plan = new L.Routing.Plan(latlngs, planOptions);\r\n\r\n    const control = L.Routing.control({\r\n      plan,\r\n      addWaypoints: false,\r\n      routeWhileDragging: false\r\n    }).addTo(map);\r\n    \r\n    //divide el array\r\n    for (var i = 0; i < this.ListCoor.length; i++) {\r\n      console.log(\"Entra for\")\r\n      \r\n      var objCoorde = this.ListCoor[i];\r\n      var lati = parseFloat(objCoorde.latitud);\r\n      var longi = parseFloat(objCoorde.longitud);  \r\n      var num = parseFloat(objCoorde.id);\r\n\r\n      if(num==1){\r\n        L.marker([longi, lati]).addTo(map).bindPopup(\"Punto \" + num).openPopup();\r\n      }\r\n      latlngs.push([longi,lati]);\r\n    }\r\n\r\n    control.setWaypoints(latlngs); //Establece los puntos en el mapa\r\n    control.hide();\r\n  }\r\n\r\n  public loadCoor(): void{\r\n    this.dbService.getCoor().subscribe(\r\n      (res) => {\r\n        console.log(\"ENTRA A SERVICIO\");\r\n        //variable para guardar la conversion de datos json a string\r\n        const listString = JSON.stringify(res);\r\n        //concatena los datos que se reciben uno a uno en listString en el arreglo ListCoor\r\n        this.ListCoor = JSON.parse(listString);\r\n        //DEBUG\r\n        console.log('Coordenadas nuevas = ' + this.ListCoor);\r\n      },\r\n      (e) => {\r\n        console.log('ERROR: ' + e);\r\n      }\r\n    );\r\n  }\r\n}\r\n","<div class=\"contenedor\">\r\n    <div class=\"map\" id=\"map\" #map></div>\r\n</div>\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}